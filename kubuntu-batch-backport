#!/bin/bash

script=$0
urgency="low"
cachedir="$(pwd)/cache/backport"
hookdir="$(pwd)/backport-hooks"
build=1
include_source=""

printhelp() {
    echo "Batch Backport script"
    echo "synopsis: $script [options] -v kde-version -f from-release -t to-release -V to-release-version"
    echo
    echo "parameters:"
    echo "  -v --version <kde-version>        version of the kde release"
    echo "  -f --from-release <release>       release codename that the packages are published in"
    echo "  -t --to-release <release>         release codename that you're backporting to"
    echo "  -V --to-release-version <version> version of the release you're backporting to"
    echo ""
    echo "options:"
    echo "  -P --packagelist <path>           file with list of packages to be backported [kdesc-packages-\${to-release}-backport.txt]"
    echo "  -c --cache <path>                 location where the packages will be prepared in [./cache/backport]"
    echo "  -b --hookdir <path>               location of the backport hooks [./backport-hooks]"
    echo "  -B --build <num>                  build number (~ppa<num>) [1]"
    echo "  -u --urgency <urgency>            urgency to use in changelog [low]"
    echo "  -sa                               include usptream source (Default: no)"
    echo "  -h --help                         show this help and exit"
    exit 0

}

while [[ "$1" =~ -.* ]]; do
    if [[ "$1" == "-v" || "$1" == "--version" ]]; then
        shift
        version="$1"
        shift
    elif [[ "$1" == "-f" || "$1" == "--from-release" ]]; then
        shift
        from_release="$1"
        shift
    elif [[ "$1" == "-t" || "$1" == "--to-release" ]]; then
        shift
        release="$1"
        shift
    elif [[ "$1" == "-V" || "$1" == "--to-release-version" ]]; then
        shift
        rver="$1"
        shift
    elif [[ "$1" == "-P" || "$1" == "--packagelist" ]]; then
        shift
        listfile="$1"
        shift
    elif [[ "$1" == "-c" || "$1" == "--cache" ]]; then
        shift
        cachedir="$1"
        shift
    elif [[ "$1" == "-u" || "$1" == "--urgency" ]]; then
        shift
        urgency="$1"
        shift
    elif [[ "$1" == "-sa" ]]; then
        include_source="-sa"
        shift
    elif [[ "$1" == "-b" || "$1" == "--hookdir" ]]; then
        shift
        hookdir="$1"
        shift
    elif [[ "$1" == "-B" || "$1" == "--build" ]]; then
        shift
        build="$1"
        shift
    elif [[ "$1" == "-h" || "$1" == "--help" ]]; then
        printhelp
    fi

done

if [[ -z "$version" || -z "$from_release" || -z "$release" || -z "$rver" ]]; then
    echo "At least one required option is missing!"
    printhelp
fi

mkdir -p $cachedir

if [ -z "$listfile" ]; then
    listfile="kdesc-packages-$release-backport.txt"
fi

for pkg in $(cat $listfile); do

    cd $cachedir

    pull-ninjas-source $pkg $from_release

    test -e $pkg-$version* || continue # package not in ppa
    cd $pkg-$version*/debian

    # FIXME: this breaks as soon as a package has a ~ in the upstream version
    # part, like 3~rc or so
    ubuntu_version_tmp1="$(head -n 1 changelog)"
    ubuntu_version_tmp2=${ubuntu_version_tmp1##*(}
    if [[ "$ubuntu_version_tmp2" =~ .*~.* ]]; then
        ubuntu_version=${ubuntu_version_tmp2%%~*}
    else
        ubuntu_version=${ubuntu_version_tmp2%%)*}
    fi

    dch -b -v "$ubuntu_version~ubuntu${rver}~ppa$build" -u $urgency -D $release "$release backport"

    # run package adjustment hook
    export hookdir
    test -x $hookdir/$release && $hookdir/$release
    test -x $hookdir/$pkg-$release && $hookdir/$pkg-$release

    debuild -S $include_source -us -uc

    cd $cachedir
done
