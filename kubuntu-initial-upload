#!/usr/bin/python

import argparse
import glob
import os
from launchpadlib.launchpad import Launchpad
import re
import subprocess
import sys
import tempfile
import urllib
import shutil

from lib.utils import *

parser = argparse.ArgumentParser(description="Upload new KDE SC or KF5 version to the PPA.")
parser.add_argument("-d", "--dist", required=True, help="Distribution name")
parser.add_argument("-v", "--version", required=True, help="Upstream version")
parser.add_argument("-m", "--message", required=True, help="Changelog and commit message")
parser.add_argument("-p", "--packages", help="Override the list packages to upload (comma separated)")
parser.add_argument("-t", "--tmpdir", help="Temprary dir where the packages are prepared")
parser.add_argument("-y", "--distversion", help="Dist version number, e.g. 12.10")
parser.add_argument("--nopush", action="store_true", help="Don't Push branches while preparing the packages")
parser.add_argument("-r", "--releasetype", help="Type [kdeapplications,kdesc,kf5,plasma]", default="kdeapplications")
parser.add_argument("--sru", action="store_true", help="Do a Stable Release Upload")
parser.add_argument("-e", "--ecmversion", help="extra-cmake-modules version")

args = parser.parse_args()

release = args.dist
version = args.version
changelogEntry = args.message
sru = args.sru
cwd = os.getcwd()
epoch = "4:"
releaseType = args.releasetype
if releaseType == "kf5":
    epoch = ""

kf5portingAids = ["kdelibs4support",
                  "kfileaudiopreview",
                  "khtml",
                  "kjs",
                  "kjsembed",
                  "kmediaplayer",
                  "kross",
                  "krunner",
                 ]

plasmaPackagesWithoutEpoch = ["baloo-kf5", "kfilemetadata-kf5", "libkscreen", "libnm-qt", "libmm-qt"]

if releaseType == "kf5":
    bzrBranch = "debian:frameworks/"
elif releaseType == "plasma":
    bzrBranch = "debian:plasma/"
elif releaseType == "kdeapplications":
    bzrBranch = "debian:kde-applications/"
else:
    bzrBranch = "bzr+ssh://bazaar.launchpad.net/~kubuntu-packagers/kubuntu-packaging/"

def firstLineMatch(expression, lines):
    for line in lines:
        match = expression.search(line)
        if match:
            return line

    return False

def sanitizeBranch(package):
    archiveChangelog = extractDebianFile(package, "debian/changelog")
    if archiveChangelog == True:
        print "=== " + package + " is not in the archive"
        return True
    elif not archiveChangelog:
        print "not archiveChangelog"
        return False
    bzrChangelog = readAllFromFile("debian/changelog")
    if not bzrChangelog:
        print "not bzrChangelog"
        return False

    archiveChangelog = archiveChangelog.splitlines()
    bzrChangelog = bzrChangelog.splitlines()

    archiveTopline = firstLineMatch(topline, archiveChangelog)
    archiveEndline = firstLineMatch(endline, archiveChangelog)

    if not releaseType == "kf5" and (archiveTopline not in bzrChangelog or archiveEndline not in bzrChangelog):
        print "bzr does not match archive"
        return False

    return True

def extractDebianFile(package, extractfile):
    try:
        source = archive.getPublishedSources(distro_series=series, exact_match=True, pocket="Release", source_name=package)[0]
    except IndexError:
        return True

    pkgFiles = []
    sourceUrls = source.sourceFileUrls()
    for plainUrl in sourceUrls:
        url = urllib.unquote(plainUrl)
        # fetch non-orig tarball files
        match = re.search(r'/([^/]*(?:\.diff\.gz|\.debian\.tar\.[a-z0-9]+|\.dsc))$', url)
        if match:
            localfile = match.group(1)
            if localfile[-4:] == ".dsc":
                dscfile = localfile
            pkgFiles.append(localfile)
            urllib.urlretrieve(plainUrl, localfile)

    if len(pkgFiles) < 2:
        return False

    pDscExtract = subprocess.Popen(["dscextract", dscfile, extractfile], stdout=subprocess.PIPE)
    data = pDscExtract.communicate()[0]
    if pDscExtract.returncode != 0:
        return False

    for filename in pkgFiles:
        os.remove(filename)

    return data

def upstreamName(package):
    if package == "kde4libs":
        return "kdelibs"
    elif package == "attica-kf5":
        return "attica"
    elif package == "kactivities-kf5":
        return "kactivities"
    elif package == "kwallet-kf5":
        return "kwallet"
    elif package == "kdnssd-kf5":
        return "kdnssd"
    elif package == "baloo-kf5":
        return "baloo"
    elif package == "breeze-qt4":
        return "breeze"
    elif package == "oxygen-qt4":
        return "oxygen"
    elif package == "kfilemetadata-kf5":
        return "kfilemetadata"
    else:
        return package


launchpad = Launchpad.login_anonymously("kubuntu-initial-upload", "production")
ubuntu = launchpad.distributions["ubuntu"]
distversion = args.distversion
series = ubuntu.getSeries(name_or_version=release)
if args.distversion == None:
    distversion = series.version
archive = ubuntu.main_archive

if not sru:
    topline = re.compile(r'^(\w%(name_chars)s*) \(([^\(\) \t]+)\)'
                         '((\s+%(name_chars)s+)+)\;'
                         % {'name_chars': '[-+0-9a-z.]'},
                         re.IGNORECASE)
    endline = re.compile('^ -- (.*) <(.*)>(  ?)((\w+\,\s*)?\d{1,2}\s+\w+\s+'
                         '\d{4}\s+\d{1,2}:\d\d:\d\d\s+[-+]\d{4}(\s+\([^\\\(\)]\))?\s*)$')

versionParts = version.split(".")
lastDigit = int(versionParts[-1])

if lastDigit >= 80:
    stability = "unstable"
else:
    stability = "stable"

if args.packages:
    packages = args.packages.split(",")
elif releaseType == "kf5":
    packages = readPackages("kf5-packages-" + release + ".txt")
elif releaseType == "plasma":
    packages = readPackages("plasma-packages-" + release + ".txt")
elif releaseType == "kdeapplications":
    packages = readPackages("kdeapplications-packages-" + release + ".txt")
else:
    packages = readPackages("kdesc-packages-" + release + ".txt")

# move libraries to the front
packages.sort(key=lambda package: package.find("lib") != -1 and "_" + package or package)
packages.sort(key=lambda package: package.find("extra-cmake-modules") != -1 and "_" + package or package)

if args.tmpdir:
    basedir = os.path.abspath(args.tmpdir)
else:
    basedir = tempfile.mkdtemp()
uploaddir = basedir + "/upload"

try:
    os.mkdir(uploaddir)
except OSError:
    print "using " + uploaddir

try:
    os.mkdir(basedir + "/manual")
except OSError:
    print "using " + basedir + "/manual"

moved = []

for package in packages:

    # check if it's a plasma package without an epoch
    changelogEpoch = epoch
    if releaseType == "plasma":
       changelogEpoch = "" if package in plasmaPackagesWithoutEpoch else epoch
       print "setting epoch to %s for %s" % (changelogEpoch, package)

    archive = ubuntu.getArchive(name='primary')
    archive_package = archive.getPublishedSources(source_name=package)
    if len(archive_package) > 0:
        archive_version = archive_package[0].source_package_version
        if version in archive_version:
            print "=== Skipping %s because version %s is already in the archive" % (package, version)
            continue

    os.mkdir(basedir + "/" + package)
    os.chdir(basedir + "/" + package)
    if package == "extra-cmake-modules":
        upstreamVersion = args.ecmversion
    else:
        upstreamVersion = version

    import re
    splitVersion = re.split("\.", version)
    versionOnDepot = splitVersion[0] + "." + splitVersion[1]
    # fetch orig tarball
    if releaseType == "kf5" and upstreamName(package) in kf5portingAids:
        remote = "depot.kde.org:/home/ftpubuntu/%s/frameworks/%s/portingAids/%s-%s.tar.xz" % \
          (stability, versionOnDepot, upstreamName(package), upstreamVersion)
    elif releaseType == "kf5":
        remote = "depot.kde.org:/home/ftpubuntu/%s/frameworks/%s/%s-%s.tar.xz" % \
          (stability, versionOnDepot, upstreamName(package), upstreamVersion)
    elif releaseType == "plasma":
        remote = "depot.kde.org:/home/ftpubuntu/%s/plasma/%s/%s-%s.tar.xz" % \
          (stability, version, upstreamName(package), upstreamVersion)
    elif releaseType == "kdeapplications":
        remote = "depot.kde.org:/home/ftpubuntu/%s/applications/%s/src/%s-%s.tar.xz" % \
          (stability, version, upstreamName(package), upstreamVersion)
    else:
        remote = "depot.kde.org:/home/ftpubuntu/%s/%s/src/%s-%s.tar.xz" % \
          (stability, version, upstreamName(package), upstreamVersion)
    try:
        subprocess.check_call(["rsync", "--progress", "-z", "--compress-level=9", "-e ssh", remote, "."])
    except:
        print "==== Skipping %s, failed to fetch tarball from depot.kde.org, moving to manual/" % (package)
        shutil.move(basedir + "/" + package, basedir + "/manual/" + package)
        moved.append((package, "failed to fetch tarball from depot"))
        continue
    orig = "%s_%s.orig.tar.xz" % (package, upstreamVersion)
    os.rename("%s-%s.tar.xz" % (upstreamName(package), upstreamVersion), orig)

    if sru:
        subprocess.check_call(["tar", "xJf", orig])

        # fetch and extract previous version
        try:
            subprocess.check_call(["pull-lp-source", "-d", package, release + "-proposed"])
        except:
            try: 
                subprocess.check_call(["pull-lp-source", "-d", package, release])
            except:
                moved.append((package, "something wicked happened when pulling package from launchpad"))

        dscname = glob.glob("%s_*.dsc" % (package,))[0]
        match = re.match(re.escape(package) + r'_([\d\.a-z]+)-', dscname)
        if not match:
            print "==== Skipping %s, version parsing failed, moving to manual/" % (package,)
            shutil.move(basedir + "/" + package, basedir + "/manual/" + package)
            moved.append((package, "version parsing failed"))
            continue

        prevVersion = match.group(1)

        subprocess.check_call(["dpkg-source", "-x", "--skip-patches", dscname])
        os.rename("%s-%s/debian" % (package, prevVersion), "./debian")

        p = subprocess.Popen(["diff", "-Nurw", "%s-%s" % (package, prevVersion), "%s-%s" % (package, upstreamVersion)], stdout=subprocess.PIPE)
        diff, _ = p.communicate()
        p = subprocess.Popen(["diffstat", "-l", "-p1"], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        diffstat, _ = p.communicate(diff)
        if p.returncode != 0:
            raise subprocess.CalledProcessError(p.returncode)
        diffstatLines = diffstat.strip("\r\n\t ").splitlines()
        diffstatLines = filter(lambda line: not line.endswith("/index.cache.bz2"), diffstatLines)

        # we need to upload all packages that in kde-sc-dev-latest Breaks
        # except for the packages that have a stable ABI
        # TODO what about bindings?
        if package == "kde4libs" or package == "kdepimlibs" or package == "kde-workspace":
            significantChanges = True
        else:
            if not diffstatLines:
                print "==== Skipping %s, same as the previous version" % (package,)
                continue
            significantChanges = False

        for line in diffstatLines:
            if line.endswith(".cpp") or line.endswith(".h") or line.endswith(".desktop"):
                significantChanges = True
                break

        if not significantChanges:
            p = subprocess.Popen(["less"], stdin=subprocess.PIPE)
            p.communicate("Package: %s\n\n=== diffstat ===\n\n%s\n\n=== diff ===\n\n%s" % (package, diffstat, diff))
            sys.stdout.write("Update package [Y/n]? ")
            choice = raw_input().lower()
            if choice not in ("yes", "y", ""):
                continue

        if upstreamName(package) != package:
            os.rename("%s-%s" % (upstreamName(package), version), "%s-%s" % (package, version))
        os.rename("./debian", "%s-%s/debian" % (package, version))
        os.chdir("%s-%s" % (package, version))
    else: #not sru
        if releaseType == "kf5" or releaseType == "plasma" or releaseType == "kdeapplications":
            subprocess.check_call(["git", "clone", bzrBranch + upstreamName(package), "git"])
            os.chdir("git")
            subprocess.check_call(["git", "checkout", "kubuntu_%s_archive" % (release)])
        else:
            subprocess.check_call(["bzr", "branch", bzrBranch + upstreamName(package), "bzr"])
            os.chdir("bzr")

        if not sanitizeBranch(package):
            print "==== Skipping %s, git/bzr branch has unexpected content, moving to manual/" % (package,)
            shutil.move(basedir + "/" + package, basedir + "/manual/" + package)
            moved.append((package, "git/bzr unclean or out of sync"))
            continue

    # bump buil-dep versions for packages that were in kde-sc-dev-latest
    bumpVersionArgs = [cwd + "/kubuntu-bump-versions",
                       "--dist", release,
                       "--version", upstreamVersion]
    if releaseType == "kf5":
        bumpVersionArgs += ["--kf5"]
    if releaseType == "plasma":
        bumpVersionArgs += ["--plasma"]
    if releaseType == "kdeapplications":
        bumpVersionArgs += ["--kdeapplications"]
    if args.ecmversion:
        bumpVersionArgs += ["--ecmversion", args.ecmversion]
    print (bumpVersionArgs)
    subprocess.check_call(bumpVersionArgs)

    debianVersion = "0ubuntu"
    if sru:
        debianVersion += "0.1~ubuntu" + distversion + "~ppa1"
    else:
        debianVersion += "1"

    if sru:
        changelogRelease = release
    else:
        changelogRelease = "UNRELEASED"
    pkgChangelog = readAllFromFile("debian/changelog")
    # Don't run dch again if the message is already part of the current
    # changelog entry for this upstream version
    pattern = re.compile("^%s \((\d+:)?%s.*?\).*?\n --" % (package, upstreamVersion), re.DOTALL)
    if not re.match(pattern, pkgChangelog) or not re.match(".*%s.*" % changelogEntry, re.match(pattern, pkgChangelog).group(0), re.DOTALL):
        subprocess.check_call(["dch", "-v", "%s%s-%s" % (changelogEpoch, upstreamVersion, debianVersion), "-D", changelogRelease, changelogEntry])

    try:
        if sru:
            subprocess.check_call(["debuild", "-S", "-nc"])
        else:
            subprocess.call(["debcommit", "-a"])
            debianVersion += "~ubuntu" + distversion + "~ppa1"
            if not args.nopush:
                if releaseType == "kf5" or releaseType == "plasma" or releaseType == "kdeapplications":
                    subprocess.check_call(["git", "push"])
                    subprocess.check_call(["git-buildpackage-ppa", "-d", release, "--distversion", distversion, "--", "-nc"])
                else:
                    subprocess.check_call(["bzr", "push", ":parent"])
                    subprocess.check_call(["bzr-buildpackage-ppa", "-d", release, "--distversion", distversion, "--", "-nc"])

        subprocess.check_call(["dcmd", "cp", "../%s_%s-%s_source.changes" % (package, upstreamVersion, debianVersion), uploaddir])
    except subprocess.CalledProcessError, e:
        # package build failed, manual intervention necessary
        print "==== " + package + " build was interrupted, moving to manual/"
        shutil.move(basedir + "/" + package, basedir + "/manual/" + package)
        moved.append((package, "build was interrupted"))

print "\n\n=== Packages are ready for upload in " + uploaddir

if len(moved) > 0:
    output = []
    for item in moved:
        output.append(": ".join(item))
    print "\n=== The following packages couldn't be processed and have been moved to manual/"
    print "\n".join(output)

# kate: space-indent on; indent-width 4; replace-tabs on; indent-mode python; remove-trailing-space on;
