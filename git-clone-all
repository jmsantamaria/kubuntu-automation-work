#!/usr/bin/python3

############################################################################
#   Copyright © 2015 José Manuel Santamaría Lema <panfaust@gmail.com>      #
#   Copyright © 2015 Philip Muskovac <yofel@gmx.net>                       #
#                                                                          #
#   This program is free software; you can redistribute it and/or modify   #
#   it under the terms of the GNU General Public License as published by   #
#   the Free Software Foundation; either version 2 of the License, or      #
#   (at your option) any later version.                                    #
############################################################################

import os
import sys
import argparse
import subprocess

from lib.utils import *

#Argument parser
parser = argparse.ArgumentParser(
    description="Clones all the frameworks or plasma or apps git repositories"
    " to the current directory")
parser.add_argument("-r", "--releasetype",
    help="KDE Release Type [frameworks,plasma,applications]"
    "if not specified downloads all the git repositories",
    required=False)
parser.add_argument("-d", "--dist",
    help="KDE Release Type [frameworks,plasma,applications]", 
    default="wily", required=False)
parser.add_argument("-t", "--tmpdir",
    help="Temprary dir where the packages are prepared",
    required=False)

#Check arguments
args = parser.parse_args()

releaseTypes = []

if args.releasetype != None:
    if args.releasetype not in ["frameworks", "plasma", "applications"]:
        print("Invalid releasetype %s" % args.releasetype)
        print("Accepted release types are frameworks, plasma, applications")
        sys.exit(1)
    else:
        releaseTypes.append(args.releasetype)
else:
    releaseTypes = ["frameworks", "plasma", "applications"]

#Find out the base url to clone and the extra remotes
cwd = os.path.dirname(os.path.realpath(__file__))
config_file = open(cwd + "/conf/git-clone-all.json")
config_map = json.load(config_file)
template_url_clone = config_map[config_map["clone-this-one"]]
print("Template url to clone: %s" % template_url_clone)
remotes_list = config_map["extra-remotes"]

packages_not_cloned = []

#Change to temporary work directory
if args.tmpdir:
    os.chdir(args.tmpdir)

#Clone the repositories and add the extra remotes
for releaseType in releaseTypes:
    #Get package list
    packages = getFtpVersionMap(releaseType)
    for package in packages:
        repo_name = package
        command = "git clone " + (template_url_clone % (releaseType,repo_name))
        print("Executing: " + command)
        try:
            subprocess.check_output(command.split())
        except KeyboardInterrupt:
            print("abort by user request")
            sys.exit(130)
        except subprocess.CalledProcessError:
            #In any other exception we continue, this way we can use
            #git-clone-all against a directory with some repositories already cloned.
            if not os.path.exists(os.getcwd() + '/' + package):
                packages_not_cloned.append(package)
            continue
        for i in remotes_list:
            template_url_remote = str(config_map[i])
            remote_name = i.split('-')[-1]
            try:
                command = "git remote add " + remote_name + " " + (template_url_remote % (releaseType,repo_name))
                print("Executing: " + command)
                old_cwd = os.getcwd()
                os.chdir(repo_name)
                subprocess.check_call(command.split())
                os.chdir(old_cwd)
            except TypeError:
                print("The remote %s couldn't be added using the template url:\n%s" % (remote_name,template_url_remote))

print("Summary:")
if not packages_not_cloned:
    print("All packages were cloned succesfully")
else:
    print("The following packages couldn't be cloned:")
    for p in packages_not_cloned:
        print(p)
    sys.exit(1)

# vim: expandtab ts=4
