#!/usr/bin/python

import apt_pkg
import argparse
from distro_info import UbuntuDistroInfo
from launchpadlib.launchpad import Launchpad
import re
import sys

parser = argparse.ArgumentParser(description="Retry builds whoes build-deps are built now.")
parser.add_argument("-r", "--release", default="utopic", help="Release name (default: current development release)")
parser.add_argument("--ppa", action="store_true", help="Check kubuntu-ninjas PPA instead of the main archive.")
parser.add_argument("--experimental", action="store_true", help="Check kubuntu-ppa/experimental PPA instead of the main archive.")
parser.add_argument("--nextppa", action="store_true", help="Check kubuntu-ppa/next PPA instead of the main archive.")
parser.add_argument("--proposed", action="store_true", help="Check the proposed pocket instead of release.")
parser.add_argument("--force", action="store_true", help="Retry every package without checking whether it's useful.")
parser.add_argument("--forcedepwait", action="store_true", help="Retry not only FTBFS package but DEPWAIT too.")
parser.add_argument("--all", action="store_true", help="Retry all ppa packages.")
parser.add_argument("--kf5", action="store_true", help="Retry KDE Frameworks 5 packages.")

args = parser.parse_args()

release = args.release
ppa = args.ppa
experimental = args.experimental
nextppa = args.nextppa
if args.proposed:
    pocket = "Proposed"
else:
    pocket = "Release"

apt_pkg.init()

lp = Launchpad.login_with("kubuntu-retry-builds", "production")

ubuntu = lp.distributions["ubuntu"]
lpseries = ubuntu.getSeries(name_or_version=release)
if ppa:
    archive = lp.people["kubuntu-ninjas"].getPPAByName(name="ppa")
elif experimental:
    archive = lp.people["kubuntu-ppa"].getPPAByName(name="experimental")
elif nextppa:
    archive = lp.people["kubuntu-ppa"].getPPAByName(name="next")
else:
    archive = ubuntu.main_archive

def get_log(url):
    # hack to get build log for private PPAs
    try:
        url = url.replace("https://launchpad.net/", "https://api.launchpad.net/devel/")
        return lp._browser.get(url)
    except:
        return ""

def get_binary_version(binaryName, arch):
    archSeries = lpseries.getDistroArchSeries(archtag=arch)
    binaries = archive.getPublishedBinaries(distro_arch_series=archSeries, status="Published", binary_name=binaryName, exact_match=True)
    if not binaries:
        return False
    else:
        return binaries[0].binary_package_version

def can_retry(log, arch):
    matches = re.findall(r'Breaks: ([^ ]+) \(< ([^\)]+)\)', log)
    if not matches:
        return False

    for match in matches:
        currentVersion = get_binary_version(match[0], arch)
        if not currentVersion:
            return False
        if apt_pkg.version_compare(currentVersion, match[1]) < 0:
            return False

    return True

try:
    if args.kf5:
        f = open("kf5-packages-"+release+".txt", "r")
    else:
        f = open("kdesc-packages-"+release+".txt", "r")
    kdesc = f.readlines()
    f.close()
except IOError:
    kdesc = '' # don't crash if there is no file to open


kdesc = map(lambda line: line.strip("\r\n\t "), kdesc)
kdesc = filter(lambda line: line and not line.startswith("#"), kdesc)

# move libraries to the front
kdesc.sort(key=lambda package: package.find("lib") != -1 and "_" + package or package)

if args.all and (args.ppa or args.nextppa or args.experimental) :
    packages_ = archive.getPublishedSources(distro_series=lpseries, status="Published")
    packages = set()
    for pkg in packages_:
        packages.add(pkg.source_package_name)
else:
    packages = kdesc

for package in packages:
    sources = archive.getPublishedSources(distro_series=lpseries, exact_match=True, status="Published", pocket=pocket, source_name=package)
    try:
        source = sources[0]
    except IndexError:
        print >> sys.stderr, "Package not found: " + package
        continue

    for build in source.getBuilds():
        if build.buildstate != "Failed to build":
            if args.forcedepwait and build.buildstate != "Dependency wait":
                continue

        arch = build.arch_tag
        log = get_log(build.build_log_url)

        if args.force or can_retry(log, arch):
            if build.can_be_retried:
                print "Retrying %s (%s)" % (source.source_package_name, arch)
                build.retry()
        else:
            print "Can't retry: %s (%s)" % (source.source_package_name, arch)

# kate: space-indent on; indent-width 4; replace-tabs on; indent-mode python; remove-trailing-space on;
